/*
 * This file is generated by jOOQ.
 */
package learn_jooq.gaoxiaobu.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import learn_jooq.gaoxiaobu.generated.Keys;
import learn_jooq.gaoxiaobu.generated.LearnJooq;
import learn_jooq.gaoxiaobu.generated.tables.records.S1UserRecord;

import lombok.Data;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * USER TABLE
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S1User extends TableImpl<S1UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>learn-jooq.s1_user</code>
     */
    public static final S1User S1_USER = new S1User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S1UserRecord> getRecordType() {
        return S1UserRecord.class;
    }

    /**
     * The column <code>learn-jooq.s1_user.id</code>. ID
     */
    public final TableField<S1UserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "ID");

    /**
     * The column <code>learn-jooq.s1_user.username</code>.
     */
    public final TableField<S1UserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>learn-jooq.s1_user.email</code>.
     */
    public final TableField<S1UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>learn-jooq.s1_user.address</code>.
     */
    public final TableField<S1UserRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>learn-jooq.s1_user.create_time</code>.
     */
    public final TableField<S1UserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>learn-jooq.s1_user.update_time</code>.
     */
    public final TableField<S1UserRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private S1User(Name alias, Table<S1UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private S1User(Name alias, Table<S1UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("USER TABLE"), TableOptions.table());
    }

    /**
     * Create an aliased <code>learn-jooq.s1_user</code> table reference
     */
    public S1User(String alias) {
        this(DSL.name(alias), S1_USER);
    }

    /**
     * Create an aliased <code>learn-jooq.s1_user</code> table reference
     */
    public S1User(Name alias) {
        this(alias, S1_USER);
    }

    /**
     * Create a <code>learn-jooq.s1_user</code> table reference
     */
    public S1User() {
        this(DSL.name("s1_user"), null);
    }

    public <O extends Record> S1User(Table<O> child, ForeignKey<O, S1UserRecord> key) {
        super(child, key, S1_USER);
    }

    @Override
    public Schema getSchema() {
        return LearnJooq.LEARN_JOOQ;
    }

    @Override
    public Identity<S1UserRecord, Integer> getIdentity() {
        return (Identity<S1UserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<S1UserRecord> getPrimaryKey() {
        return Keys.KEY_S1_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<S1UserRecord>> getKeys() {
        return Arrays.<UniqueKey<S1UserRecord>>asList(Keys.KEY_S1_USER_PRIMARY);
    }

    @Override
    public S1User as(String alias) {
        return new S1User(DSL.name(alias), this);
    }

    @Override
    public S1User as(Name alias) {
        return new S1User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S1User rename(String name) {
        return new S1User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S1User rename(Name name) {
        return new S1User(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
