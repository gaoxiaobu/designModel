/*
 * This file is generated by jOOQ.
 */
package learn_jooq.gaoxiaobu.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import learn_jooq.gaoxiaobu.generated.Keys;
import learn_jooq.gaoxiaobu.generated.LearnJooq;
import learn_jooq.gaoxiaobu.generated.tables.records.S2UserMessageRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户消息内容
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S2UserMessage extends TableImpl<S2UserMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>learn-jooq.s2_user_message</code>
     */
    public static final S2UserMessage S2_USER_MESSAGE = new S2UserMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S2UserMessageRecord> getRecordType() {
        return S2UserMessageRecord.class;
    }

    /**
     * The column <code>learn-jooq.s2_user_message.id</code>.
     */
    public final TableField<S2UserMessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>learn-jooq.s2_user_message.user_id</code>.
     */
    public final TableField<S2UserMessageRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>learn-jooq.s2_user_message.message_title</code>. 消息标题
     */
    public final TableField<S2UserMessageRecord, String> MESSAGE_TITLE = createField(DSL.name("message_title"), SQLDataType.VARCHAR(60), this, "消息标题");

    /**
     * The column <code>learn-jooq.s2_user_message.message_content</code>. 消息内容
     */
    public final TableField<S2UserMessageRecord, String> MESSAGE_CONTENT = createField(DSL.name("message_content"), SQLDataType.VARCHAR(500), this, "消息内容");

    /**
     * The column <code>learn-jooq.s2_user_message.create_time</code>. 创建时间
     */
    public final TableField<S2UserMessageRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>learn-jooq.s2_user_message.update_time</code>. 更新时间
     */
    public final TableField<S2UserMessageRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    private S2UserMessage(Name alias, Table<S2UserMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private S2UserMessage(Name alias, Table<S2UserMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户消息内容"), TableOptions.table());
    }

    /**
     * Create an aliased <code>learn-jooq.s2_user_message</code> table reference
     */
    public S2UserMessage(String alias) {
        this(DSL.name(alias), S2_USER_MESSAGE);
    }

    /**
     * Create an aliased <code>learn-jooq.s2_user_message</code> table reference
     */
    public S2UserMessage(Name alias) {
        this(alias, S2_USER_MESSAGE);
    }

    /**
     * Create a <code>learn-jooq.s2_user_message</code> table reference
     */
    public S2UserMessage() {
        this(DSL.name("s2_user_message"), null);
    }

    public <O extends Record> S2UserMessage(Table<O> child, ForeignKey<O, S2UserMessageRecord> key) {
        super(child, key, S2_USER_MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return LearnJooq.LEARN_JOOQ;
    }

    @Override
    public Identity<S2UserMessageRecord, Integer> getIdentity() {
        return (Identity<S2UserMessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<S2UserMessageRecord> getPrimaryKey() {
        return Keys.KEY_S2_USER_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<S2UserMessageRecord>> getKeys() {
        return Arrays.<UniqueKey<S2UserMessageRecord>>asList(Keys.KEY_S2_USER_MESSAGE_PRIMARY);
    }

    @Override
    public S2UserMessage as(String alias) {
        return new S2UserMessage(DSL.name(alias), this);
    }

    @Override
    public S2UserMessage as(Name alias) {
        return new S2UserMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S2UserMessage rename(String name) {
        return new S2UserMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S2UserMessage rename(Name name) {
        return new S2UserMessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
